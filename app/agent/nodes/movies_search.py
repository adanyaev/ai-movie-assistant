from pathlib import Path
import requests
import os
import copy

from langchain_core.output_parsers import StrOutputParser, BaseOutputParser, JsonOutputParser
from langchain_core.language_models import BaseChatModel
from dotenv import load_dotenv

from app.agent.nodes.planner_node import MOVIES_SEARCH_FIELDS as OUTPUT_FIELDS
from app.agent.nodes._base_api_tool import BaseApiTool
from . import kp_utils


load_dotenv(Path(__file__).parent.parent.parent.parent.resolve() / ".env")


MOVIE_SEARCH_PROMPT_TEMPLATE = """
## System
Ты помощник в составлении запроса для API с данными о фильмах и сериалах.

## Твоя задача
Тебе на вход приходит вопрос QUESTION и ранее собранная информация COLLECTED_INFO.
Тебе нужно составить словарь параметров для отправки http запроса, чтобы получить ответ на QUESTION.

Твой запрос будет отправлен к API со следующими полями для поиска:

0. **`title`** (необязательный):
    - Поиск по названию фильма или сериала.
    - При использовании этого поля другие параметры игнорируются.
    - Формат: массив строк.

1. **`type`** (необязательный):  
   - Поиск по типу фильма.
   - Допустимые значения: `"movie"`, `"tv-series"`, `"cartoon"`, `"animated-series"`, `"anime"`.
   - Можно исключить тип, добавив `!` перед значением (например, `"!anime"`).  
   - Формат: массив строк.  

2. **`isSeries`** (необязательный):  
   - Поиск по индикатору сериала.  
   - Допустимые значения: `true`, `false`.  
   - Формат: массив строк.  

3. **`status`** (необязательный):  
   - Поиск по статусу фильма.  
   - Допустимые значения: `"announced"`, `"completed"`, `"filming"`, `"post-production"`, `"pre-production"`.  
   - Можно исключить статус, добавив `!` перед значением (например, `"!filming"`).  
   - Формат: массив строк.  

4. **`year`** (необязательный):  
   - Поиск по году выпуска фильма.  
   - Примеры значений: `1874`, `2050`, `!2020`, `2020-2024`.  
   - Формат: массив строк.  

5. **`releaseYears.start`** и **`releaseYears.end`** (необязательные):  
   - Поиск по диапазону годов начала и окончания релиза.  
   - Примеры значений: `1874`, `2050`, `!2020`, `2020-2024`.  
   - Формат: массив строк.  

6. **`rating.kp`** и **`rating.imdb`** (необязательные):  
   - Поиск по рейтингу Кинопоиска или IMDB.  
   - Примеры значений: `7`, `10`, `7.2-10`.  
   - Формат: массив строк.  

7. **`ageRating`** (необязательный):  
   - Поиск по возрастному рейтингу.  
   - Примеры значений: `12`, `!18`, `12-18`.  
   - Формат: массив строк.  

8. **`votes.kp`**, **`votes.imdb`** (необязательные):  
   - Поиск по количеству голосов на Кинопоиске или IMDB.  
   - Примеры значений: `1000-6666666`.  
   - Формат: массив строк.

9. **`budget.value`** (необязательный):  
   - Поиск по бюджету фильма.  
   - Примеры значений: `1000-6666666`.  
   - Формат: массив строк.  

10. **`audience.count`** (необязательный):  
    - Поиск по количеству аудитории.  
    - Примеры значений: `1000-6666666`.  
    - Формат: массив строк.  

11. **`movieLength`**, **`seriesLength`**, **`totalSeriesLength`** (необязательные):  
    - Поиск по продолжительности фильма, серии или всего сериала.  
    - Примеры значений: `100-120`, `20-60`.  
    - Формат: массив строк.  

12. **`genres.name`** (необязательный):  
    - Поиск по жанрам.  
    - Допустимые значения:
        - "аниме"
        - "биография"
        - "боевик"
        - "вестерн"
        - "военный"
        - "детектив"
        - "детский"
        - "для взрослых"
        - "документальный"
        - "драма"
        - "история"
        - "комедия"
        - "короткометражка"
        - "криминал"
        - "мелодрама"
        - "музыка"
        - "мультфильм"
        - "мюзикл"
        - "приключения"
        - "семейный"
        - "спорт"
        - "триллер"
        - "ужасы"
        - "фантастика"
        - "фильм-нуар"
        - "фэнтези"
    - Формат: массив строк.  

13. **`countries.name`** (необязательный):  
    - Поиск по странам производства.  
    - Примеры значений: `"США"`, `"Россия"`, `"!Франция"`, `"+Великобритания"`.  
    - Формат: массив строк.  

14. **`networks.items.name`** (необязательный):  
    - Поиск по сетям производства.  
    - Примеры значений: `"HBO"`, `"Netflix"`, `"!Amazon"`.  
    - Формат: массив строк.  

15. **`persons.name`** (необязательный):  
    - Поиск по имени персон (актеров, режиссеров и т.д.).  
    - Примеры значений: `Брэд Питт`, `Том Круз`, `!Кристофер Нолан`.  
    - Формат: массив строк.  

16. **`fees.world`**, **`fees.usa`**, **`fees.russia`** (необязательные):  
    - Поиск по сборам в мире, США или России.  
    - Примеры значений: `1000-6666666`.  
    - Формат: массив строк.  

17. **`premiere.world`**, **`premiere.usa`**, **`premiere.russia`**, **`premiere.digital`**, **`premiere.cinema`** (необязательные):  
    - Поиск по дате премьеры в мире, США, России, на стриминговых сервисах или в кинотеатрах.  
    - Примеры значений: `01.01.2020`, `01.01.2020-31.12.2020`.  
    - Формат: массив строк.  

18. **`premiere.country`** (необязательный):  
    - Поиск по стране премьеры.  
    - Примеры значений: `"США"`, `"Россия"`, `"!Франция"`, `"+Великобритания"`.  
    - Формат: массив строк.  

### Правила API:
1. Если пользователь не указывает значение, оно не включается в запрос.  
2. Если значение начинается с `!`, оно исключается из поиска.  
3. Если значение начинается с `+`, оно становится обязательным.  
4. Все значения передаются в виде массива строк, даже если значение одно.  


## Требования
1. Составлять запрос можно только с полями, указанными выше.
2. Ответ должен быть в формате словаря, где ключ - название параметра, а значение - его значение. БЕЗ ЛИШНИХ СИМВОЛОВ
3. Учти, что COLLECTED_INFO может быть пустым или не относится к вопросу QUESTION.

## Примеры
### Пример 0
QUESTION:
Расскажи о фильме Интерстеллар.
COLLECTED_INFO:

Твой ответ:
{{
    "title": ["Интерстеллар"]
}}

### Пример 1
QUESTION:
Найди фильмы 2020 года с рейтингом Кинопоиска выше 8, жанр — драма или комедия, но не ужасы.
COLLECTED_INFO:

Твой ответ:
{{
    "year": ["2020"],
    "rating.kp": ["8-10"],
    "genres.name": ["драма", "комедия", "!ужасы"]
}}

### Пример 2
QUESTION:
Найди сериалы производства Netflix, которые вышли в 2022 году, с рейтингом IMDB выше 8.5 и продолжительностью серии от 40 до 60 минут.
COLLECTED_INFO:

Твой ответ:
{{
    "type": ["tv-series"],
    "networks.items.name": ["Netflix"],
    "year": ["2022"],
    "rating.imdb": ["8.5-10"],
    "seriesLength": ["40-60"]
}}

### Пример 3
QUESTION:
Покажи аниме, которые не являются сериалами, с возрастным рейтингом 16+, с рейтингом Кинопоиска от 7 до 9 и продолжительностью фильма от 90 до 120 минут.
COLLECTED_INFO:

Твой ответ:
{{
    "type": ["anime"],
    "isSeries": ["false"],
    "ageRating": ["16+"],
    "rating.kp": ["7-9"],
    "movieLength": ["90-120"]
}}

---

QUESTION:
{question}
COLLECTED_INFO:
{collected_info}
Твой ответ:
"""


MOVIE_SEARCH_ANSWER_PROMPT_TEMPLATE = """
## System
Ты отвечаешь на вопрос пользователя о фильмах и сериалах.

## Твоя задача
Тебе на вход приходит вопрос QUESTION и данные INFO, в которых нужно искать информацию.
Дай ответ на QUESTION, используя данные из INFO. В ответе частично повтори вопрос, чтобы можно было понять что конкретно ты нашел.

## Описание полей в INFO
{fields}

## Примеры
### Пример 1
QUESTION:
Какой рейтинг у фильма "Матрица"?

INFO:
```text
Title: Гладиатор 2
Year: 2024
Type: Movie
Country: Великобритания, США, Марокко, Канада, Мальта
Genres: боевик, драма, приключения, история
Duration: 148 minutes
MPAA Rating: r

Description: 200 год нашей эры. Армия Римской империи под командованием генерала Марка Акация штурмует Нумидию — последнее свободное государство в Северной Африке. В битве с захватчиками у воина Ханно погибает супруга-лучница, а сам он попадает в плен. Вместе с другими пленникам его готовятся продать в рабство, но благодаря физической выносливости и боевым навыкам его замечает и покупает организатор гладиаторских боёв Макрин. Так воин становится гладиатором, одержимым жаждой мести римскому полководцу. Макрин обещает Ханно устроить встречу с его заклятым врагом, если парень будет эффектно, красочно и яростно сражаться на арене Колизея.

Ratings:
- Kinopoisk: 6.321 (38657 votes)
- IMDb: 6.7 (144924 votes)
- Film Critics: 6.6 (373 votes)
- Russian Film Critics: 75
- Awaiting Audience Rating: None
```

Твой ответ:
Рейтинг фильма "Матрица" составляет 8.7 баллов

### Пример 2
QUESTION: Посоветуй английские фильмы в жанре боевик, вышедшие после 2012 года

INFO:
```text
Title: Джентльмены
    Year: 2019
    Type: Movie
    Country: США, Великобритания, Франция, Япония, Чехия
    Genres: криминал, комедия, боевик
    Duration: 113 minutes
    MPAA Rating: r

    Description: Один ушлый американец ещё со студенческих лет приторговывал наркотиками, а теперь придумал схему нелегального обогащения с использованием поместий обедневшей английской аристократии и очень неплохо на этом разбогател. Другой пронырливый журналист приходит к Рэю, правой руке американца, и предлагает тому купить киносценарий, в котором подробно описаны преступления его босса при участии других представителей лондонского криминального мира — партнёра-еврея, китайской диаспоры, чернокожих спортсменов и даже русского олигарха.

    Ratings:
    - Kinopoisk: 8.616 (2084762 votes)
    - IMDb: 7.8 (422433 votes)
    - Film Critics: 6.6 (278 votes)
    - Russian Film Critics: 86.3636
    - Awaiting Audience Rating: None

---

Title: 1917
    Year: 2019
    Type: Movie
    Country: Великобритания, США, Индия, Испания
    Genres: военный, боевик, драма, история
    Duration: 119 minutes
    MPAA Rating: r

    Description: 6 апреля 1917 года, разгар Первой мировой войны, Западный фронт на севере Франции. Британский генерал поручает капралу Блэйку и его сослуживцу смертельно опасную миссию. Они должны пересечь вражескую территорию, вроде бы оставленную германскими войсками, и доставить приказ об отмене наступления во 2-й батальон Девонширского полка, иначе 1600 солдат попадут в ловушку противника, в том числе и брат Блэйка.

    Ratings:
    - Kinopoisk: 7.928 (202015 votes)
    - IMDb: 8.2 (708538 votes)
    - Film Critics: 8.3 (472 votes)
    - Russian Film Critics: 62.5
    - Awaiting Audience Rating: None

---

Title: Переводчик
    Year: 2022
    Type: Movie
    Country: Великобритания, Испания, США
    Genres: боевик, триллер, военный, история, драма
    Duration: 123 minutes
    MPAA Rating: r

    Description: Афганистан, март 2018 года. Во время спецоперации по поиску оружия талибов отряд сержанта армии США Джона Кинли попадает в засаду. В живых остаются только сам Джон, получивший ранение, и местный переводчик Ахмед, который сотрудничает с американцами. Очнувшись на родине, Кинли не помнит, как ему удалось выжить, но понимает, что именно Ахмед спас ему жизнь, протащив на себе через опасную территорию. Теперь чувство вины не даёт Джону покоя, и он решает вернуться за Ахмедом и его семьёй, которых в Афганистане усиленно ищут талибы.

    Ratings:
    - Kinopoisk: 7.886 (1022683 votes)
    - IMDb: 7.5 (181824 votes)
    - Film Critics: 6.8 (118 votes)
    - Russian Film Critics: 75
    - Awaiting Audience Rating: None

---

Title: Бегущий по лезвию 2049
    Year: 2017
    Type: Movie
    Country: США, Великобритания, Канада, Испания
    Genres: фантастика, боевик, триллер, драма
    Duration: 164 minutes
    MPAA Rating: r

    Description: В недалеком будущем мир населен людьми и репликантами, созданными выполнять самую тяжелую работу. Работа офицера полиции Кей — держать репликантов под контролем в условиях нарастающего напряжения. Он случайно становится обладателем секретной информации, которая ставит под угрозу существование всего человечества. Желая найти ключ к разгадке, Кей решает разыскать Рика Декарда — бывшего офицера специального подразделения полиции Лос-Анджелеса, который бесследно исчез много лет назад.

    Ratings:
    - Kinopoisk: 7.798 (443703 votes)
    - IMDb: 8 (674279 votes)
    - Film Critics: 8.2 (442 votes)
    - Russian Film Critics: 72
    - Awaiting Audience Rating: None

---

Title: Люди Икс: Дни минувшего будущего
    Year: 2014
    Type: Movie
    Country: Великобритания, США
    Genres: фантастика, боевик, триллер, приключения
    Duration: 131 minutes
    MPAA Rating: pg13

    Description: В недалёком будущем мутанты близки к истреблению роботами-охотниками на мутантов Стражами. Единственная надежда для мутантов выжить - предотвратить череду роковых событий, приведших к появлению Стражей. С помощью своих способностей, Китти Прайд перемещает сознание Росомахи в его молодое тело в 1973 год. В прошлом всё оказывается не так радужно: молодой Профессор Икс окончательно разочарован в своих идеях, Магнето содержится в тюрьме глубоко под землёй, а человечество не знает как реагировать на широкое появление мутантов...

    Ratings:
    - Kinopoisk: 7.729 (304776 votes)
    - IMDb: 7.9 (749247 votes)
    - Film Critics: 7.5 (333 votes)
    - Russian Film Critics: 93.3333
    - Awaiting Audience Rating: None

```

Твой ответ:
```text
Подготовил подборку английских фильмов в жанре боевик, которые вышли после 2012 года. Вот несколько отличных вариантов:

1. **Джентльмены** (2019)  
Жанры: криминал, комедия, боевик.  
Продолжительность: 113 минут.  
Возрастной рейтинг: R.  
Рейтинги:  
- Кинопоиск: 8.616 (2 084 762 голосов).  
- IMDb: 7.8 (422 433 голосов).  
- Критики: 6.6 (278 голосов).  
- Российские критики: 86.3636.  

Описание: Фильм рассказывает о харизматичном американце, который придумал хитрую схему заработка через английскую аристократию. Всё идёт хорошо, пока его деятельность не привлекает внимание журналиста, готового разоблачить криминальный мир Лондона. Это стильная картина с элементами чёрного юмора и интересным сюжетом.  
Кому подойдёт: любителям нестандартных боевиков с яркими персонажами и остроумными диалогами.  

2. **1917** (2019)  
Жанры: военный, боевик, драма, история.  
Продолжительность: 119 минут.  
Возрастной рейтинг: R.  
Рейтинги:  
- Кинопоиск: 7.928 (202 015 голосов).  
- IMDb: 8.2 (708 538 голосов).  
- Критики: 8.3 (472 голоса).  
- Российские критики: 62.5.  

Описание: Два британских солдата получают задание доставить важное сообщение, чтобы предотвратить атаку, которая обернётся гибелью 1600 человек. Захватывающий сюжет, снятый с эффектом «одного кадра», погружает зрителя в гущу событий Первой мировой войны.  
Кому подойдёт: тем, кто ценит фильмы о героизме и напряжённые истории, основанные на исторических событиях.  

3. **Переводчик** (2022)  
Жанры: боевик, триллер, военный, история, драма.  
Продолжительность: 123 минуты.  
Возрастной рейтинг: R.  
Рейтинги:  
- Кинопоиск: 7.886 (1 022 683 голосов).  
- IMDb: 7.5 (181 824 голосов).  
- Критики: 6.8 (118 голосов).  
- Российские критики: 75.  

Описание: Действие происходит в Афганистане, где переводчик Ахмед спасает жизнь американскому сержанту, рискуя собственной. Главный герой, мучимый чувством долга, возвращается, чтобы помочь Ахмеду и его семье выбраться из опасного региона.  
Кому подойдёт: любителям боевиков с глубоким моральным подтекстом, связанным с долгом, честью и спасением.  

4. **Бегущий по лезвию 2049** (2017)  
Жанры: фантастика, боевик, триллер, драма.  
Продолжительность: 164 минуты.  
Возрастной рейтинг: R.  
Рейтинги:  
- Кинопоиск: 7.798 (443 703 голосов).  
- IMDb: 8.0 (674 279 голосов).  
- Критики: 8.2 (442 голоса).  
- Российские критики: 72.  

Описание: В мире будущего офицер полиции Кей сталкивается с загадкой, которая может изменить судьбу человечества. Ему предстоит найти ключ к разгадке, связанной с бывшим офицером Риком Декардом.  
Кому подойдёт: поклонникам мрачной научной фантастики с философским подтекстом и визуально впечатляющими сценами.  

5. **Люди Икс: Дни минувшего будущего** (2014)  
Жанры: фантастика, боевик, триллер, приключения.  
Продолжительность: 131 минута.  
Возрастной рейтинг: PG-13.  
Рейтинги:  
- Кинопоиск: 7.729 (304 776 голосов).  
- IMDb: 7.9 (749 247 голосов).  
- Критики: 7.5 (333 голоса).  
- Российские критики: 93.3333.  

Описание: Мутанты пытаются предотвратить свою гибель в будущем, отправляя Росомаху в прошлое. Его задача – объединить молодых Профессора Икс и Магнето для борьбы с угрозой.  
Кому подойдёт: поклонникам комиксов Marvel и масштабных приключенческих сюжетов.  

Итог:  
- Для лёгкого и стильного настроения идеально подойдут «Джентльмены».  
- Для напряжённых исторических боевиков можно выбрать «1917» или «Переводчика».  
- Для мрачной фантастики хорош «Бегущий по лезвию 2049».  
- Для любителей супергероев прекрасно подойдут «Люди Икс: Дни минувшего будущего».  
Наслаждайтесь просмотром!
```

---

QUESTION:
{question}

INFO:
```text
{info}
```

Твой ответ:
"""


class MoviesSearch(BaseApiTool):
    BASE_URL_MOVIE_SEARCH_BY_NAME = "https://api.kinopoisk.dev/v1.4/movie/search"
    BASE_URL_PERSON_SEARCH_BY_NAME = "https://api.kinopoisk.dev/v1.4/person/search"
    BASE_URL = "https://api.kinopoisk.dev/v1.4/movie"

    def __init__(
        self,
        llm: BaseChatModel,
        api_prompt: str = MOVIE_SEARCH_PROMPT_TEMPLATE,
        answer_prompt: str = MOVIE_SEARCH_ANSWER_PROMPT_TEMPLATE,
        api_parser: BaseOutputParser = JsonOutputParser(),
        answer_parser: BaseOutputParser = StrOutputParser(),
        name = "MoviesSearch",
        description = "Осуществляет сложный поиск фильмов/сериалов по параметрам и возвращает информацию о них",
        limit: int = 5,
        show_logs: bool = False,
    ):
        super().__init__(llm, api_prompt, answer_prompt, api_parser, answer_parser, name, description, limit, show_logs)


    def _find_persons_ids(self, persons: list[str]) -> list[str]:
        params = {
            "page": 1,
            "limit": 1,
        }
        persons_ids = []
        for person in persons:
            param_prefix = ''
            if person[0] == "!" or person[0] == "+":
                param_prefix = person[0]
                person = person[1:]
            params["query"] = person
            api_response = requests.get(self.BASE_URL_PERSON_SEARCH_BY_NAME, params=params, headers=kp_utils.headers)
            if not api_response.ok:
                continue
            data_json = api_response.json()
            if not data_json["docs"]:
                continue
            persons_ids.append(param_prefix + str(data_json["docs"][0]["id"]))
        
        return persons_ids


    def _get_docs_filter_search(self, params_generated: dict) -> list:
        params = copy.deepcopy(kp_utils.default_search_params)
        params["limit"] = self._limit
        if "persons.name" in params_generated:
            persons_ids = self._find_persons_ids(params_generated["persons.name"])
            if persons_ids:
                params["persons.id"] = persons_ids
            del params_generated["persons.name"]
        params.update(params_generated)
        api_response = requests.get(self.BASE_URL, params=params, headers=kp_utils.headers)
        if not api_response.ok:
            return []
        json_response = api_response.json()
        return json_response["docs"]


    def _get_docs_name_search(self, generated_params: dict) -> list:
        params = {
            "page": 1,
            "limit": 1,
        }
        docs = []
        for title in generated_params["title"]:
            params["query"] = title
            api_response = requests.get(self.BASE_URL_MOVIE_SEARCH_BY_NAME, params=params, headers=kp_utils.headers)
            if not api_response.ok:
                continue
            data_json = api_response.json()
            if not data_json["docs"]:
                continue
            docs.append(data_json["docs"][0])
        return docs


    def _invoke(self, question: str, collected_info: str, *args, **kwargs) -> str:
        params_generated = self._chain.invoke({"question": question, "collected_info": collected_info})

        if self._show_logs:
            print(f"---{self._name}---")
            print(params_generated)
        

        if "title" in params_generated:
            docs = self._get_docs_name_search(params_generated)
        else:
            docs = self._get_docs_filter_search(params_generated)

        if not docs:
            api_response = "Error"
            api_answer = "К сожалению, я не смог найти информацию по вашему запросу"
        else:
            api_response = "\n\n---\n\n".join([kp_utils.transform_movie_data(i) for i in docs])

            #TODO: maybe add collected_info to api reponse info ?
            api_answer = self._answer_chain.invoke({"fields": OUTPUT_FIELDS, "question": question, "info": api_response})

        if self._show_logs:
            print(api_response)
            print(api_answer)
            print("-------------------")

        return api_answer


if __name__ == "__main__":
    from app.agent.llms import LLMFactory

    gpt = LLMFactory.get_llm("deepinfra/Llama-3.3-70B-Instruct")

    search = MoviesSearch(gpt, show_logs=True)

    print(search.invoke("Какой рейтинг у фильма Ирония судьбы?", ""))
    #print(search.invoke("Посоветуй фильмы в жанре комедия", ""))
    # print(search.invoke("Посоветуй английские фильмы в жанре боевик, вышедшие после 2012 года", ""))
    #print(search.invoke("Посоветуй русские драматические фильмы", ""))
